cimport "stdlib.h";

pub impure fn u64 strlen(i8 *s);
pub impure fn i8* strcpy(i8 *dest, i8 *src);
pub impure fn i32 strcmp(i8 *s1, i8 *s2);

type KVNode = struct {
    i8 *key;
    void *value;
    KVNode *next;
};

type KV = struct {
    KVNode *head;
};

type KVIterator = struct {
    KVNode *node;
};

pub impure fn KV *new_kv() {
    let KV *heap_kv = malloc(8);
    let kv = struct KV { nil };
    store heap_kv kv;
    heap_kv
}

pub impure fn void kv_insert(mut KV *kv, i8 *key, void *value) {
    if strlen(key) == 0 {
        ret;
    };

    let KV *heap_new_node = malloc(32);
    let new_node = struct KVNode { as i8* malloc(strlen(key) + 1), value, nil };
    strcpy(new_node.key, key);
    store heap_new_node new_node;

    let mut node = kv->head;
    if node == nil {
        kv->head = heap_new_node;
        ret;
    };

    while node->next != nil {
        node = node->next;
    };

    node->next = heap_new_node;
}

pub impure fn i8* kv_lookup(KV *kv, i8 *key) {
    let mut node = kv->head;
    while node != nil {
        if strcmp(key, node->key) == 0 {
            ret node->value;
        };

        node = node->next;
    };

    as i8* 0
}

pub impure fn void kv_delete(mut KV *kv, i8 *key) {
    let mut cur = kv->head;
    let mut KVNode *prev = nil;
    while cur != nil {
        if strcmp(key, cur->key) == 0 {
            if prev == nil {
                kv->head = cur->next;
            } else {
                prev->next = cur->next;
            };

            free(cur->key);
            free(cur);
            break;
        };

        prev = cur;
        cur = cur->next;
    };
}

pub impure fn void destroy_kv(KV *kv) {
    let mut node = kv->head;
    while node != nil {
        let next = node->next;
        free(node->key);
        free(node);
        node = next;
    };

    free(kv);
}

pub impure fn KVNode* kv_iter(KV *kv) {
    kv->head
}

pub impure fn i8 *kv_next(mut KVIterator *kviter) {
    let mut node = kviter->node;
    if node == nil {
        as i8* 0
    } else {
        kviter->node = node->next;

        node->value
    }
}

pub impure fn i32 kv_end(KVNode *iter_node) {
    if iter_node == nil { 1 } else { 0 }
}
