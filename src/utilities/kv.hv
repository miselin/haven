cimport "stdlib.h";

pub impure fn strlen(i8 *s) -> u64;
pub impure fn strcpy(i8 *dest, i8 *src) -> i8*;
pub impure fn strcmp(i8 *s1, i8 *s2) -> i32;

type KVNode = struct {
    i8 *key;
    void *value;
    KVNode *next;
};

type KV = struct {
    KVNode *head;
};

type KVIterator = struct {
    KVNode *node;
};

pub impure fn new_kv() -> KV* {
    let mut heap_kv = as KV* malloc(as u64 sizeof KV);
    heap_kv->head = nil;
    heap_kv
}

pub impure fn kv_insert(mut KV *kv, i8 *key, void *value) -> void {
    if strlen(key) == 0 {
        ret;
    };

    let mut node = as KVNode* malloc(as u64 sizeof KVNode);
    node->key = malloc(strlen(key) + 1);
    node->value = value;
    node->next = nil;

    strcpy(node->key, key);

    let mut last = kv->head;
    let mut iternode = last;
    if last == nil {
        kv->head = node;
        ret;
    };

    while iternode != nil {
        last = iternode;

        if strcmp(iternode->key, key) == 0 {
            iternode->value = value;
            free(node->key);
            free(node);
            ret;
        };

        iternode = iternode->next;
    };

    last->next = node;
}

pub impure fn kv_lookup(KV *kv, i8 *key) -> i8* {
    let mut node = kv->head;
    while node != nil {
        if strcmp(key, node->key) == 0 {
            ret node->value;
        };

        node = node->next;
    };

    as i8* 0
}

pub impure fn kv_delete(mut KV *kv, i8 *key) -> void {
    let mut cur = kv->head;
    let mut KVNode *prev = nil;
    while cur != nil {
        if strcmp(key, cur->key) == 0 {
            if prev == nil {
                kv->head = cur->next;
            } else {
                prev->next = cur->next;
            };

            free(cur->key);
            free(cur);
            break;
        };

        prev = cur;
        cur = cur->next;
    };
}

pub impure fn destroy_kv(KV *kv) -> void {
    let mut node = kv->head;
    while node != nil {
        let next = node->next;
        free(node->key);
        free(node);
        node = next;
    };

    free(kv);
}

pub impure fn kv_iter(KV *kv) -> KVNode* {
    kv->head
}

pub impure fn kv_next(mut KVIterator *kviter) -> i8* {
    let mut node = kviter->node;
    if node == nil {
        as i8* 0
    } else {
        kviter->node = node->next;

        node->value
    }
}

pub impure fn kv_end(KVNode *iter_node) -> i32 {
    if iter_node == nil { 1 } else { 0 }
}
