cimport "stdio.h";
cimport "stdlib.h";
cimport "string.h";

type TrieValue = enum {
    Value(i8*),
    NoValue
};

type TrieNode = struct {
    i32 id;
    i8[256] key;
    TrieValue value;

    TrieNode*[256] children;
};

type Trie = struct {
    TrieNode *root;
    i32 next_id;
};

type LookupResult = enum {
    Found(TrieNode*),
    NotFound
};

impure fn char_to_i8ptr(i8 c) -> i8* {
    let mut ptr = as i8* malloc(2);
    ptr[0] = c;
    ptr[1] = 0;
    ptr
}

pub impure fn new_trie() -> Trie* {
    let mut root_node = as TrieNode* calloc(1, as u64 sizeof TrieNode);
    root_node->id = 0;
    root_node->key[0] = 0;
    root_node->value = TrieValue::NoValue;
    iter 0:255 i {
        root_node->children[i] = nil
    };

    let mut Trie* heap_trie = as Trie* malloc(as u64 sizeof Trie);
    heap_trie->root = root_node;
    heap_trie->next_id = 1;

    heap_trie
}

impure fn has_children(TrieNode *node) -> i32 {
    iter 0:255 i {
        if node->children[i] != nil {
            ret 1;
        };
    };

    0
}

impure fn next_id(mut Trie *trie) -> i32 {
    let id = trie->next_id;
    trie->next_id = trie->next_id + 1;
    id
}

pub impure fn trie_insert(mut Trie *trie, i8 *key, i8 *value) -> void {
    if key[0] == 0 {
        ret;
    };

    let mut node = trie->root;
    let mut root_child = node->children[key[0]];
    node = if root_child == nil {
        let mut new_node = as TrieNode* calloc(1, as u64 sizeof TrieNode);
        new_node->id = next_id(trie);
        new_node->key[0] = key[0];
        new_node->key[1] = 0;
        new_node->value = TrieValue::NoValue;
        iter 0:255 i {
            new_node->children[i] = nil;
        };

        node->children[key[0]] = new_node;

        new_node
    } else {
        root_child
    };

    let mut i32 ikey = 0;
    let mut i32 inode = 0;
    while (key[ikey]) > 0 {
        let mut k = key[ikey];
        let mut nk = node->key[inode];
        if k == nk {
            ikey = ikey + 1;
            inode = inode + 1;
            nk = node->key[inode];
            k = key[ikey];
        };

        if nk > 0 {
            // split the node
            let mut split_node = as TrieNode* calloc(1, as u64 sizeof TrieNode);
            split_node->id = next_id(trie);

            strcpy(split_node->key, (as i8* node->key) + inode);

            split_node->value = node->value;

            iter 0:255 i {
                split_node->children[i] = nil;
            };

            // old node gets the prefix
            node->key[inode] = 0;
            node->value = TrieValue::NoValue;

            let n = split_node->key[0];
            node->children[n] = split_node;
        };

        if k == 0 {
            // split node is now the leaf
            break;
        };

        if !has_children(node) {
            // just append the key
            while key[ikey] > 0 {
                node->key[inode] = key[ikey];
                ikey = ikey + 1;
                inode = inode + 1;
            };
            node->key[inode] = 0;
            break;
        };

        node = if node->children[k] == nil {
            let mut new_child = as TrieNode* calloc(1, as u64 sizeof TrieNode);
            new_child->id = next_id(trie);
            strcpy(new_child->key, key + ikey);
            new_child->value = TrieValue::NoValue;
            iter 0:255 i {
                new_child->children[i] = nil;
            };

            node->children[k] = new_child;
            new_child
        } else {
            inode = 0;
            node->children[k]
        };

        if inode > 0 {
            break;
        };
    };

    node->value = TrieValue::Value(value);
}

impure fn node_for(Trie *trie, i8 *key) -> LookupResult {
    let mut node = trie->root;
    let mut i32 ikey = 0;
    let mut i32 i = 0;
    while (key[ikey]) != 0 && node != nil {
        let k = key[ikey];
        if k == node->key[i] {
            ikey = ikey + 1;
            i = i + 1;
            continue;
        };

        node = node->children[k];
        i = 0;
    };

    if node == nil {
        LookupResult::NotFound
    } else if key[ikey] != 0 || node->key[i] != 0 {
        LookupResult::NotFound
    } else {
        LookupResult::Found(node)
    }
}

pub impure fn trie_lookup(Trie *trie, i8 *key) -> i8* {
    let node = node_for(trie, key);
    match node {
        LookupResult::Found(node) => {
            match node->value {
                TrieValue::Value(value) => {
                    value
                }
                _ => {
                    as i8* 0
                }
            }
        }
        _ => {
            as i8* 0
        }
    }
}

pub impure fn trie_remove(mut Trie* trie, i8* key) -> void {
    let mut node = node_for(trie, key);
    match node {
        LookupResult::Found(node) => {
            node->value = TrieValue::NoValue;
        }
        _ => {
            ret;
        }
    }
}

impure fn destroy_trie_node(mut TrieNode *node) -> void {
    iter 0:255 i {
        if node->children[i] != nil {
            destroy_trie_node(node->children[i]);
        };
    };

    free(node);
}

pub impure fn destroy_trie(Trie *trie) -> void {
    destroy_trie_node(trie->root);
    free(trie);
}

impure fn dump_trie_node(FILE* stream, TrieNode *node) -> void {
    if node == nil {
        ret;
    };

  fprintf(stream, "  %zd [label=\"%s\"];\n", node->id, node->key);
  iter 0:255 i {
    if node->children[i] != nil {
        fprintf(stream, "  %zd -> %zd [label=\"%d %c\"];\n", node->id, node->children[i]->id, i, i);
        dump_trie_node(stream, node->children[i]);
    };
  };
}

pub impure fn dump_trie(Trie *trie) -> void {
    let stream = fopen("trie.dot", "w");
    fprintf(stream, "digraph Trie {\n");
    fprintf(stream, "  node [shape=circle];\n");

    let root = trie->root;

    fprintf(stream, "  root [label=\"root\"];\n");
    iter 0:255 i {
        if root->children[i] != nil {
            fprintf(stream, "  root -> %zd [label=\"%c\"];\n", root->children[i]->id, i);
            dump_trie_node(stream, root->children[i]);
        };
    };

    fprintf(stream, "}\n");
    fclose(stream);
}
