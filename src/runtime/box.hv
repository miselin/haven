cimport "stdlib.h";

pub impure fn i8* memcpy(i8* dest, i8* src, i32 size);

type Box = struct {
    i32 refcount;
};

pub impure fn Box* __haven_new_empty_box(i32 box_size) {
    // size includes the refcount
    let mut result = as Box* calloc(1, as u64 box_size);
    result->refcount = 1;

    result
}

pub impure fn Box* __haven_new_box(i32* value, i32 box_size, i32 value_size) {
    let result = __haven_new_empty_box(box_size);
    let p = as i8* result;
    // use the end of the box to find the alignment for the value
    memcpy(p + (box_size - value_size), value, value_size);

    result
}

pub impure fn void __haven_box_ref(mut Box* target) {
    if target == nil {
        ret;
    };

    target->refcount = target->refcount + 1;
}

pub impure fn void __haven_box_unref(mut Box* target) {
    if target == nil {
        ret;
    };

    target->refcount = target->refcount - 1;
    if target->refcount == 0 {
        free(target);
    };
}
