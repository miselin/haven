cimport "stdlib.h";

foreign "c" {
    fn printf(str format, *) -> i32;
    fn memcpy(i8* dest, i8* src, i32 size) -> i8*;
}

type Box = struct {
    i32 refcount;
};

pub impure fn __haven_new_empty_box(i32 box_size) -> Box* {
    // size includes the refcount
    let mut result = as Box* calloc(1, as u64 box_size);
    result->refcount = 1;

    result
}

pub impure fn __haven_new_box(i32* value, i32 box_size, i32 value_size) -> Box* {
    let result = __haven_new_empty_box(box_size);
    let p = as i8* result;
    // box header is 16 bytes, then the value
    memcpy(p + 16, value, value_size);

    printf("new box %p\n", result);

    result
}

pub impure fn __haven_box_ref(mut Box* target) -> void {
    if target == nil {
        ret;
    };

    printf("ref box %p rc %d -> ", target, target->refcount);
    target->refcount = target->refcount + 1;
    printf("%d\n", target->refcount);
}

pub impure fn __haven_box_unref(mut Box* target) -> void {
    if target == nil {
        ret;
    };

    printf("unref box %p rc %d -> ", target, target->refcount);
    target->refcount = target->refcount - 1;
    printf("%d\n", target->refcount);
    if target->refcount == 0 {
        free(target);
    };
}
