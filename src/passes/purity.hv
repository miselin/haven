cimport "stdlib.h";
cimport "stdio.h";
cimport "../../include/ast.h";
cimport "../../include/types.h";

type PurityContext = struct {
    ast_program *ast;
    compiler *comp;
    ast_toplevel *current_function;
    i32 errors;
};

impure fn VisitorResult purity_visitor(ast_visitor_node *node, void *user_data);
impure fn i32 check_purity_expr(PurityContext *ctx, ast_expr *ast);

pub impure fn PurityContext *purity_new(ast_program *ast, compiler *comp) {
    let mut result = as PurityContext *calloc(1, as u64 sizeof (PurityContext));
    result->ast = ast;
    result->comp = comp;
    result
}

pub impure fn i32 purity_run(PurityContext *ctx) {
    ast_visit(ctx->comp, ctx->ast, purity_visitor, ctx);
    ctx->errors
}

pub impure fn void purity_destroy(PurityContext *ctx) {
    free(ctx);
}

impure fn VisitorResult purity_visitor(ast_visitor_node *node, void *user_data) {
    let mut ctx = as PurityContext* user_data;

    fprintf(stderr, "purity_visitor...\n");

    if node->toplevel != nil {
        let toplevel = node->toplevel;
        // AST_DECL_TYPE_FDECL
        if toplevel->type == 2 {
            ctx->current_function = toplevel;
        } else {
           ctx->current_function = nil;
        };
    } else if ctx->current_function != nil && node->expr != nil {
        let func = ctx->current_function;
        let tl = func->toplevel;
        let fd = tl.fdecl;
        let flags = fd.flags;
        // DECL_FLAG_IMPURE
        if (flags & (1 << 4)) == 0 {
            check_purity_expr(ctx, node->expr);
        };
    };

    if ctx->errors > 0 {
        VisitorResult::VisitorStop
    } else {
        VisitorResult::VisitorContinue
    }
}

impure fn i32 check_purity_expr(mut PurityContext *ctx, ast_expr *ast) {
    ctx->errors = ctx->errors + match ast->type {
        // AST_EXPR_TYPE_DEREF
        7 => {
            let expr = ast->expr;
            let deref = expr.deref;

            if deref.is_ptr {
                compiler_log(ctx->comp, LogLevel::LogLevelError, "purity", "dereference of pointers is not allowed in pure functions");
                1
            } else {
                0
            }
        }

        // AST_EXPR_TYPE_CALL
        8 => {
            let expr = ast->expr;
            let call = expr.call;
            let fdecl = call.fdecl;
            let tok = call.ident;
            let tokv = tok.value;
            let identv = tokv.identv;
            let ident = identv.ident;

            if fdecl == nil {
                // fn ptrs are always impure
                compiler_log(ctx->comp, LogLevel::LogLevelError, "purity", "calling function pointers is not allowed from pure functions (attempted usage from %s)", ident);
                1
            } else if (fdecl->flags & (1 << 4)) != 0 {
                // DECL_FLAG_IMPURE
                compiler_log(ctx->comp, LogLevel::LogLevelError, "purity", "call from pure function to impure function %s is not allowed", ident);
                1
            } else {
                0
            }
        }

        // AST_EXPR_TYPE_LOAD
        15 => {
            compiler_log(ctx->comp, LogLevel::LogLevelError, "purity", "dereference of pointers is not allowed in pure functions");
            1
        }

        _ => {
            0
        }
    };

    0
}
