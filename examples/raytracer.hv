cimport "stdio.h";
cimport "stdlib.h";
import "vec.hv";

pub fn float __builtin_ipow(float x, i32 power) intrinsic "llvm.powi" float, i32;
pub fn float __builtin_ceilf(float x) intrinsic "llvm.ceil" float;

type TraceData = struct {
    float t;
    fvec3 n;
};

type TraceResult = enum {
    Sky,
    Ball(TraceData),
    Ground(TraceData)
};

type ShadowResult = enum {
    Shadow,
    NoShadow(float)
};

i32[9] G = i32 {
    247570,
    280596,
    280600,
    249748,
    18578,
    18577,
    231184,
    16,
    16
};

float RAND_MAX = 2147483647.0;

impure fn fvec3 S(fvec3 o, fvec3 d);
impure fn TraceResult T(fvec3 o, fvec3 d);

impure fn float R() {
    (as float rand()) / RAND_MAX
}

impure fn void printvec(fvec3 v) {
    printf("(%f, %f, %f)\n", v.x, v.y, v.z);
}

pub impure fn i32 main() {
    let xdim = 511;
    let ydim = xdim;

    printf("P6 %d %d 255 ", xdim + 1, ydim + 1);
    let g = {
        let vec = <-6.0, -16.0, 0.0>;
        vnorm(vec)
    };
    let a = {
        let cross = vcross(<0.0, 0.0, 1.0>, g);
        vnorm(cross) * 0.002
    };
    let b = {
        let norm = vnorm(vcross(g, a));
        norm * 0.002
    };
    let c = {
        let sum = a + b;
        let mul = sum * -256.0;
        mul + g
    };

    iter ydim:0:-1 y {
        iter xdim:0:-1 x {
            let mut p = <13.0, 13.0, 13.0>;

            iter 0:63 r {
                let t = {
                    {
                        let r = R() - 0.5;
                        let delta = a * r;
                        delta * 99.9
                    } +
                    {
                        let r = R() - 0.5;
                        let delta = b * r;
                        delta * 99.9
                    }
                };

                let contrib = {
                    let origin = <17.0, 16.0, 8.0> + t;
                    let dir = {
                        let negt = t * -1.0;

                        let xnudge = R() + as float x;
                        let ynudge = R() + as float y;

                        let anudge = a * xnudge;
                        let bnudge = b * ynudge;
                        let nudge = anudge + bnudge + c;

                        let inner = nudge * 16.0;
                        let outer = negt + inner;

                        vnorm(outer)
                    };

                    S(origin, dir) * 3.5
                };

                p = p + contrib;
            };

            printf("%c%c%c", as i32 (p.x), as i32 (p.y), as i32 (p.z));
        };
    };

    as i32 0
}

impure fn ShadowResult shadow_ray(fvec3 h, fvec3 l, fvec3 n, float t) {
    let LdN = vdot(l, n);
    if LdN < 0.0 {
        ret ShadowResult::Shadow;
    };

    let shadow = T(h, l);

    // illumination factor only provided if there's no shadow
    match shadow {
        Sky => ShadowResult::NoShadow(LdN)
        _ => ShadowResult::Shadow
    }
}

impure fn fvec3 S(fvec3 o, fvec3 d) {
    let m = T(o, d);
    match m {
        Sky => {
            <0.7, 0.6, 1.0> * __builtin_ipow(1.0 - d.z, 4)
        }
        Ground(data) => {
            let h = o + (d * data.t);
            let l = vnorm(<(R() + 9.0), (R() + 9.0), 16.0> - h);
            let sr = shadow_ray(h, l, data.n, data.t);
            let b = match sr {
                _ => 0.0
                ShadowResult::NoShadow(x) => x
            };
            let hfifth = h * 0.2;
            let mul = b * 0.2 + 0.1;
            let ceils = __builtin_ceilf(hfifth.x) + __builtin_ceilf(hfifth.y);
            let iceils = as i32 ceils;
            let floorsquare = if (iceils & as i32 1) == as i32 1 {
                <3.0, 1.0, 1.0>
            } else {
                <3.0, 3.0, 3.0>
            };
            floorsquare * mul
        }
        Ball(data) => {
            let h = o + (d * data.t);
            let l = vnorm(<(R() + 9.0), (R() + 9.0), 16.0> - h);
            let sr = shadow_ray(h, l, data.n, data.t);
            let b = match sr {
                _ => 0.0
                ShadowResult::NoShadow(x) => x
            };
            let r = {
                let inner = vdot(data.n, d) * -2.0;
                d + (data.n * inner)
            };

            let LdR = vdot(l, r);
            let p = if (b > 0.0) { __builtin_ipow(LdR, 99) } else { 0.0 };
            let base = <p, p, p>;
            let bounce = S(h, r) * 0.5;
            let contrib = base + bounce;
            contrib
        }
        _ => <0.0, 0.0, 0.0>
    }
}

impure fn TraceResult T(fvec3 o, fvec3 d) {
    let mut result = TraceResult::Sky;
    let mut t = 1000000000.0;
    let p = -(o.z) / (d.z);
    if 0.01 < p {
        let inner = struct TraceData {p, <0.0, 0.0, 1.0>};
        let n = inner.n;
        t = p;
        result = TraceResult::Ground(inner);
    };

    iter 0:18 k {
        iter 0:8 j {
            let bit = 1 << k;
            let lookup = as i64 G[j];
            if (lookup & bit) != 0 {
                let p = o + <(as float -k), 0.0, (as float -j - 4.0)>;
                let b = vdot(p, d);
                let c = vdot(p, p) - 1.0;
                let b2 = b * b;
                let q = b2 - c;

                if q > 0.0 {
                    let s = -b - __builtin_sqrtf(q);

                    if (s < t) && (s > 0.01) {
                        let dir_dist = d * s;
                        let inner = struct TraceData {s, vnorm(dir_dist + p)};
                        result = TraceResult::Ball(inner);

                        // currently the closest object
                        t = s;
                    };
                };
            };
        };
    };

    result
}
