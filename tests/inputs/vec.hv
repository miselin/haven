pub float mut x = 0.0;
pub float mut y = 0.0;
pub float mut z = 0.0;

pub fn sqrtf(float v) -> float;

pub fn vadd(fvec3 a, fvec3 b) -> fvec3 {
    a + b
}

pub fn vscale(fvec3 a, float b) -> fvec3 {
    a * b
}

pub fn vdot(fvec3 a, fvec3 b) -> float {
    let mult = a * b;
    mult.x + mult.y + mult.z
}

pub fn vcross(fvec3 a, fvec3 b) -> fvec3 {
    let x = a.y * b.z - a.z * b.y;
    let y = a.z * b.x - a.x * b.z;
    let z = a.x * b.y - a.y * b.x;
    <x, y, z>
}

pub fn vnorm(fvec3 v) -> fvec3 {
    let denom = 1.0 / sqrtf(vdot(v, v));
    v * denom
}

pub fn velement(fvec3 v, i32 idx) -> float {
    v[idx]
}

fn put_result(fvec3 result) -> void {
    x = result.x;
    y = result.y;
    z = result.z;
}

pub fn make_fvec3(float x, float y, float z) -> fvec3 {
    <x, y, z>
}

pub fn make_const_fvec3() -> fvec3 {
    <1.0, 2.0, 3.0>
}
