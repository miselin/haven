
include(GoogleTest)

add_haven_library(haven_vec inputs/vec.hv)
add_haven_library(haven_mat inputs/mat.hv)

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    # vec/mat tests use the Clang vector/matrix extensions
    add_executable(vec_test vec_test.cc)
    target_link_libraries(vec_test haven_compiler_options_no_warnings haven_vec GTest::gtest_main)
    gtest_discover_tests(vec_test)

    add_executable(mat_test mat_test.cc)
    target_link_libraries(mat_test haven_compiler_options_no_warnings haven_mat GTest::gtest_main)
    gtest_discover_tests(mat_test)
endif ()

add_executable(trie_test trie_test.cc)
target_link_libraries(trie_test haven_compiler_options_no_warnings compiler GTest::gtest_main)
gtest_discover_tests(trie_test)

add_executable(trie_haven_test trie_test.cc)
target_link_libraries(trie_haven_test haven_compiler_options_no_warnings compiler -Wl,--whole-archive utilities_haven -Wl,--no-whole-archive GTest::gtest_main)
gtest_discover_tests(trie_haven_test)

add_executable(kv_test kv_test.cc)
target_link_libraries(kv_test haven_compiler_options_no_warnings compiler GTest::gtest_main)
gtest_discover_tests(kv_test)

add_executable(kv_haven_test kv_test.cc)
target_link_libraries(kv_haven_test haven_compiler_options_no_warnings compiler -Wl,--whole-archive utilities_haven -Wl,--no-whole-archive GTest::gtest_main)
gtest_discover_tests(kv_haven_test)

add_executable(kw_test kw_test.cc)
target_link_libraries(kw_test haven_compiler_options_no_warnings compiler GTest::gtest_main)
gtest_discover_tests(kw_test)

add_executable(tokenstream_test tokenstream_test.cc)
target_link_libraries(tokenstream_test haven_compiler_options_no_warnings compiler GTest::gtest_main)
gtest_discover_tests(tokenstream_test)

add_executable(lex_test lex_test.cc)
target_link_libraries(lex_test haven_compiler_options_no_warnings compiler GTest::gtest_main)
gtest_discover_tests(lex_test)

add_executable(parse_test parse_test.cc)
target_link_libraries(parse_test haven_compiler_options_no_warnings compiler GTest::gtest_main)
gtest_discover_tests(parse_test)

macro(add_functional_test name expectedrc)
    add_executable(${name}_test rc_test.cc)
    add_haven_library(${name}_sut inputs/${name}.hv)
    target_link_libraries(${name}_test haven_compiler_options_no_warnings ${name}_sut GTest::gtest_main)
    target_compile_definitions(${name}_test PRIVATE EXPECTED_RC=${expectedrc} TESTNAME=${name})
    gtest_discover_tests(${name}_test)
endmacro()

add_functional_test(simplest 0)
add_functional_test(add 6)
add_functional_test(prec1 90)
add_functional_test(prec2 0)
add_functional_test(shortcircuit 1)
add_functional_test(constant 0)
add_functional_test(struct 3)
add_functional_test(match 0)
add_functional_test(enum 2)
add_functional_test(enum_nobind 0)
add_functional_test(ptr 5)
add_functional_test(array 16)
add_functional_test(defer 1)
add_functional_test(type_alias 0)
add_functional_test(block 0)
add_functional_test(iter_up 0)
add_functional_test(iter_down 0)
add_functional_test(llist 1)
add_functional_test(comment 0)
add_functional_test(preproc 0)
add_functional_test(if 1)
add_functional_test(unary -12)
add_functional_test(printf 4)
add_functional_test(char 97)
add_functional_test(while 21)
add_functional_test(enum_template 5)
add_functional_test(union 5)
add_functional_test(sizeof 12)
