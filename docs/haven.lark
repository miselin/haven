start: module

module: (foreign | fndecl | tydecl)+

foreign: "foreign" STRING "{" (fndecl)* "}"

fndecl: (fnattr)* "fn" IDENT "(" params? ")" ("->" type)? (block | ";")
tydecl: "type" IDENT "=" (type | "{" (field_decl)* "}") ";"

fnattr: "impure" | "pub"

type: NUMERIC_TYPE | VEC_TYPE | MAT_TYPE | FLOAT_TYPE | VOID_TYPE | STR_TYPE | IDENT

field_decl: type IDENT ";"

params: param ("," param)* ("," "*")?
param: type IDENT

block: "{" (stmt ";")* expr? "}"

stmt: "let" IDENT (":" type)? "=" (expr | initializer) // variable declaration
    | "while" expr block // while loop
    | IDENT "=" expr // assignment
    | expr // expression with unused result

expr: if_expr
    | or_expr

if_expr: "if" expr block ("else" block)?

initializer: mat_initializer // matrix
    | vec_initializer // vector
    | "{" (expr ("," expr)*)? "}"

mat_initializer: "<" vec_initializer ("," vec_initializer)* ">"

vec_initializer: "<" expr ("," expr)* ">"

?or_expr: and_expr ("||" and_expr)*
?and_expr: cmp_expr ("&&" cmp_expr)*
?cmp_expr: add_expr (("=="|"!="|"<"|"<="|">"|">=") add_expr)*
?add_expr: mul_expr (("+"|"-") mul_expr)*
?mul_expr: unary (("*"|"/"|"%") unary)*
?unary: ("!"|"-") unary | postfix
?postfix: primary ( "(" args? ")" | "." IDENT | "[" expr "]" )*
?primary: IDENT | constant | "(" expr ")" | "cast" "<" type ">" "(" expr ")" | initializer | block
constant: INT | FLOAT | STRING
args: expr ("," expr)*

NUMERIC_TYPE: /(?:i|u)(?:8|16|32|64)/
VEC_TYPE:     /fvec[1-9][0-9]*/
MAT_TYPE:     /fmat[1-9][0-9]*x[1-9][0-9]*/
FLOAT_TYPE:   "float"
VOID_TYPE:    "void"
STR_TYPE:     "str"

IDENT: /[A-Za-z][A-Za-z0-9_]*(?:-[A-Za-z0-9_]+)*/

INT: /0|[1-9][0-9]*/
FLOAT: /[0-9]+\.([0-9]+)?/
STRING: /"([^"\\]|\\.)*"/

%import common.WS
%ignore WS
